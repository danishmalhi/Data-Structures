################################# Question 1 ################################

import ctypes  # provides low-level arrays
def make_array(n):
    return (n * ctypes.py_object)()

class ArrayList:
    def __init__(self):
        self.data = make_array(1)
        self.capacity = 1
        self.n = 0

    def __len__(self):
        return self.n


    def append(self, val):
        if (self.n == self.capacity):
            self.resize(2 * self.capacity)
        self.data[self.n] = val
        self.n += 1

    def resize(self, new_size):
        new_array = make_array(new_size)
        for i in range(self.n):
            new_array[i] = self.data[i]
        self.data = new_array
        self.capacity = new_size

    def extend(self, iter_collection):
        for elem in iter_collection:
            self.append(elem)


    def __getitem__(self, ind):
        if (not (-self.n <= ind <= self.n - 1)):
            raise IndexError('invalid index')
        if (ind < 0):
            ind = self.n + ind
        return self.data[ind]

    def __setitem__(self, ind, val):
        if (not (-self.n <= ind <= self.n - 1)):
            raise IndexError('invalid index')
        if (ind < 0):
            ind = self.n + ind
        self.data[ind] = val


    def __repr__(self):
        data_as_strings = [str(self.data[i]) for i in range(self.n)]
        return '[' + ', '.join(data_as_strings) + ']'


    def __add__(self, other):
        res = ArrayList()
        res.extend(self)
        res.extend(other)
        return res

    def __iadd__(self, other):
        self.extend(other)
        return self

    def __mul__(self, times):
        res = ArrayList()
        for i in range(times):
            res.extend(self)
        return res

    def __rmul__(self, times):
        return self * times

    def insert(self, index, val):
        self.append(val)
        self[index], self[self.n - 1] = self[self.n - 1], self[index]
        for i in range(index + 1, self.n-1):
            self[i], self[self.n-1] = self[self.n-1], self[i]



    def pop(self, index=-1):
        store = self[index]
        self[index], self[self.n-1] = self[self.n-1], self[index]
        self[self.n-1] = None
        self.n -= 1
        if self.n < 0.25 * self.capacity:
            self.resize(self.capacity // 2)
        if self.n == 0:
            raise IndexError('invalid index')
        return store



arr_lst = ArrayList()
for i in range(1, 4+1):
    arr_lst.append(i)
print(arr_lst)
arr_lst.insert(4, 30)
print(arr_lst)


################################# Question 2 ################################

def find_duplicates(lst):
  ind = 0
  search = {}
  return_lst = []
  while ind < len(lst):
    if lst[ind] in search:
      search[(lst[ind])] += 1
    else:
      search[lst[ind]] = 1
    ind += 1
  for key in search:
    if search[key] > 1:
      return_lst.append(key)
  return return_lst


################################# Question 3 ################################

def remove_all(lst, value):
  ind = len(lst)-1
  while ind > -1:
    if lst[ind] == value:
      lst.pop(ind)
    ind -= 1
  return lst
