#################################### Question 1 ##################################

#A
def shift(lst, k):
    for i in range(k):
        first_element = lst.pop(0)
        lst.append(first_element)
    print(lst)


#B
def shift(lst, k):
    direction = input(int("Enter 0 if you want to cycle left (default). Enter 1 if you want to cycle right."))
    if direction == 0 or None:
        for i in range(k):
            first_element = lst.pop(0)
            lst.append(first_element)
        return(lst)
    if dir == 1: 
        for i in range(k):
            last_element = lst.pop
            lst.insert(last_element)
        return lst


#################################### Question 2 ##################################

#A
def sum_of_squares(n):
    sum = 0
    for i in range(n):
        sum += i ** 2
    return sum

#B
def sum_of_squares(n):
    return sum([num ** 2 for i in range(n)])

#C
def sum_of_squares(n):
    sum = 0
    for i in range(n):
        if (i % 2 != 0):
            sum += i ** 2
        else:
            break
    return sum

#D
def sum_of_squares(n):
    sum([num ** 2 for num in range(n) if (num % 2 != 0)])


#################################### Question 3 ##################################

#A
lst1 = [10 ** i for i in range(0, 6)]

#B
lst2 = [(i ** 2 - i) for i in range(1, 11)]

#C
lst3 = [chr(i) for i in range(97, 123)]


#################################### Question 4 ##################################

def fibs(n):
    first_num = 1
    second_num = 1
    for i in range(n):
        yield first_num
        new_num = first_num + second_num
        first_num = second_num
        second_num = new_num


#################################### Question 5 ##################################

class Vector:
    def __init__(self, d):
        if type(d)==int:
            self.coords = [0] * d
        else:
            self.coords = []
            for num in d:
                self.coords.append(num)
        
    def __len__(self):
        return len(self.coords)
    
    def __getitem__(self, j):
        return self.coords[j]
    
    def __setitem__(self, j, val):
        self.coords[j] = val
        
    def __add__(self, other):
        if (len(self) != len(other)):
            raise ValueError("dimensions must agree")
        result = Vector(len(self))
        for j in range(len(self)):
            result[j] = self[j] + other[j]
        return result
        
    def __sub__(self,other):
        if (len(self) != len(other)):
            raise ValueError("dimensions must agree")
        result = Vector(len(self))
        for j in range(len(self)):
            result[j] = self[j] - other[j]
        return result
    
    def __neg__(self):
        result = Vector(len(self))
        for j in range(len(self)):
            result[j]= -1 * self[j]
        return result
        
    def __mul__(self, multiplier):
        if type(multiplier)==int:
            result = Vector(len(self))
            for j in range(len(result)):
                result[j] = self[j] * multiplier
        elif type(multiplier) == Vector:
            if (len(self) != len(multiplier)):
                raise ValueError("dimensions must agree")
            result=0
            for i in range(len(self)):
                sum_result = self[i] * multiplier[i]
                result += sum_result
        return result
    
    def __rmul__(self, num):
        result = Vector(len(self))
        for j in range(len(result)):
            result[j] = self[j] * num
        return result
    
        
    def __eq__(self, other):
        return self.coords == other.coords
    
    def __ne__(self, other):
        return not (self == other)
    
    def __str__(self):
        return '<'+ str(self.coords)[1:-1] + '>'
    
    def __repr__(self):
        return str(self)
