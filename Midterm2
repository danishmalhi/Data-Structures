############################ Question 1 ####################################

class DoublyLinkedList:
    class Node:
        def __init__(self, data):
            self.data = data
            self.prev = None
            self.next = None

        def disconnect(self):
            self.data = None
            self.prev = None
            self.next = None


    class Integer:
        def __init__(self, num_str):
            ''' Initializes an Integer object representing
            the value given in the string num_str '''

            if num_str:
                while num_str[0] == '0':
                    num_str = num_str[1:]
            self.data = DoublyLinkedList.DoublyLinkedList()
            self.num_of_digits = len(num_str)
            for i in range(self.num_of_digits):
                self.data.add_last(num_str[i])

        
        def __It__(self, other):
            ''' returns True if”f the number represented in self is
            less than the number represented in other, also of type
            Integer '''
            
            if self.size != other.size:
                if self.size >= other.size:
                    return False
                else:
                    return True
            else:
                var1 = self.head
                var2 = other.head
                while var1 != None and var2 != None:
                    if var1.data > var2.data:
                        return False
                    elif var1.data < var2.data:
                        return True
                    else:
                        var1 = var1.next
                        var2 = var2.next

        def add_node(self, data):
            new_node = Node(data)
            if self.head == None:
                self.head = self.tail = new_node
                self.head.prev = None
                self.tail.next = None
            else:
                self.tail.next = new_node
                new_node.prev = self.tail
                self.tail = new_node
                self.tail.next = None

        def display(self):
            curr = self.head
            if self.head == None:
                print("List is empty")
                return
            print("Integer: ")
            while curr != None:
                print(curr.data, end=" ")
                curr = curr.next


"""
n1 = Integer('336876451094675')
n2 = Integer('978234')
n3 = Integer('336876451987675')
print(n1 < n2)
print(n1 < n3)
n1.display()
"""

############################ Question 2 ####################################

def path_to_leaf_with_cost(root, target_cost):
    if root is None:
        return None
    if root.left is None and root.right is None:
        if root.data == target_cost:
            return DoublyLinkedList()
        else:
            return None
    
    left_result = path_to_leaf_with_cost(root.left, target_cost - root.data)
    if leftResult is not None:
        left_result.add_first("left")
        return left_result
    
    right_result = path_to_leaf_with_cost(root.right, target_cost - root.data)
    if right_result is not None:
        right_result.add_first("right")
        return right_result
    
    return None


############################ Question 3 ####################################

def flatten_by_nesting_depth(nested_lst):
    Arrayqueue = []
    length = len(nested_lst)
    while length != 0:
        item = nested_lst[length - 1]
        if type(item)!= type([]):
            Arrayqueue.append(nested_lst[length - 1])
            nested_lst.remove(nested_lst[length - 1])
        length -= 1
        
        for item in nested_lst:
            if type(item) == type([]):
                Arrayqueue.extend(flatten_by_nesting_depth(item))
    return Arrayqueue

nested_lst = [[1, 2], 3, [4, [5, 6, [7]], 8], 9]
new_list = flatten_by_nesting_depth(nested_lst)
print(new_list)
